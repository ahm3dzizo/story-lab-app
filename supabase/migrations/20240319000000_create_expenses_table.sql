-- Create expense_categories table
CREATE TABLE IF NOT EXISTS public.expense_categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Insert default categories
INSERT INTO public.expense_categories (name, description) VALUES
    ('office_supplies', 'Office supplies and stationery'),
    ('equipment', 'Equipment and hardware'),
    ('travel', 'Travel and transportation'),
    ('marketing', 'Marketing and advertising'),
    ('software', 'Software and subscriptions'),
    ('utilities', 'Utilities and bills'),
    ('rent', 'Rent and facilities'),
    ('other', 'Other expenses')
ON CONFLICT (name) DO NOTHING;

-- Create expenses table
CREATE TABLE IF NOT EXISTS public.expenses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description TEXT NOT NULL,
    amount NUMERIC(10,2) NOT NULL,
    category_id BIGINT REFERENCES public.expense_categories(id) ON DELETE SET NULL,
    expense_date DATE NOT NULL,
    employee_id BIGINT REFERENCES public.employees(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create indexes
CREATE INDEX idx_expenses_category_id ON public.expenses(category_id);
CREATE INDEX idx_expenses_employee_id ON public.expenses(employee_id);

-- Create trigger for updated_at
CREATE TRIGGER update_expenses_updated_at
    BEFORE UPDATE ON public.expenses
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_expense_categories_updated_at
    BEFORE UPDATE ON public.expense_categories
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Enable Row Level Security
ALTER TABLE public.expenses ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.expense_categories ENABLE ROW LEVEL SECURITY;

-- Create policies for expense_categories
CREATE POLICY "Users can view all expense categories"
    ON public.expense_categories FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Users can insert expense categories"
    ON public.expense_categories FOR INSERT
    TO authenticated
    WITH CHECK (true);

CREATE POLICY "Users can update expense categories"
    ON public.expense_categories FOR UPDATE
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Users can delete expense categories"
    ON public.expense_categories FOR DELETE
    TO authenticated
    USING (true);

-- Create policies for expenses
CREATE POLICY "Users can view all expenses"
    ON public.expenses FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Users can insert expenses"
    ON public.expenses FOR INSERT
    TO authenticated
    WITH CHECK (true);

CREATE POLICY "Users can update expenses"
    ON public.expenses FOR UPDATE
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Users can delete expenses"
    ON public.expenses FOR DELETE
    TO authenticated
    USING (true); 