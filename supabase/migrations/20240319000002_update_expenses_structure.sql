-- Drop existing table if it exists
DROP TABLE IF EXISTS public.expenses CASCADE;

-- Create expenses table with updated structure
CREATE TABLE IF NOT EXISTS public.expenses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description TEXT NOT NULL,
    amount NUMERIC(10,2) NOT NULL,
    category_id BIGINT REFERENCES public.expense_categories(id) ON DELETE SET NULL,
    expense_date DATE NOT NULL,
    partner_id BIGINT REFERENCES public.partners(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create indexes
CREATE INDEX idx_expenses_category_id ON public.expenses(category_id);
CREATE INDEX idx_expenses_partner_id ON public.expenses(partner_id);

-- Create trigger for updated_at
CREATE TRIGGER update_expenses_updated_at
    BEFORE UPDATE ON public.expenses
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Enable Row Level Security
ALTER TABLE public.expenses ENABLE ROW LEVEL SECURITY;

-- Create policies for expenses
CREATE POLICY "Users can view all expenses"
    ON public.expenses FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Users can insert expenses"
    ON public.expenses FOR INSERT
    TO authenticated
    WITH CHECK (true);

CREATE POLICY "Users can update expenses"
    ON public.expenses FOR UPDATE
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Users can delete expenses"
    ON public.expenses FOR DELETE
    TO authenticated
    USING (true); 