-- Drop existing tables (if they exist)
DROP TABLE IF EXISTS public.users CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP TABLE IF EXISTS public.partners CASCADE;
DROP TABLE IF EXISTS public.employees CASCADE;
DROP TABLE IF EXISTS public.departments CASCADE;
DROP TABLE IF EXISTS public.positions CASCADE;
DROP TABLE IF EXISTS public.salaries CASCADE;
DROP TABLE IF EXISTS public.salary_payments CASCADE;
DROP TABLE IF EXISTS public.tasks CASCADE;
DROP TABLE IF EXISTS public.task_comments CASCADE;
DROP TABLE IF EXISTS public.task_attachments CASCADE;
DROP TABLE IF EXISTS public.user_stats CASCADE;

-- Create new tables
CREATE TABLE IF NOT EXISTS public.users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    auth_id UUID UNIQUE REFERENCES auth.users(id),
    email TEXT UNIQUE NOT NULL,
    username TEXT NOT NULL,
    role TEXT NOT NULL CHECK (role IN ('admin', 'partner', 'employee', 'manager')),
    avatar_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    last_active TIMESTAMP WITH TIME ZONE,
    status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'suspended')),
    theme_preference TEXT DEFAULT 'system' CHECK (theme_preference IN ('light', 'dark', 'system')),
    font_size TEXT DEFAULT 'medium' CHECK (font_size IN ('small', 'medium', 'large')),
    compact_mode BOOLEAN DEFAULT false,
    reduced_motion BOOLEAN DEFAULT false,
    high_contrast BOOLEAN DEFAULT false,
    notifications_enabled BOOLEAN DEFAULT true,
    email_notifications BOOLEAN DEFAULT true,
    sound_enabled BOOLEAN DEFAULT true,
    two_factor_enabled BOOLEAN DEFAULT false,
    default_view TEXT DEFAULT 'grid' CHECK (default_view IN ('grid', 'list')),
    menu_position TEXT DEFAULT 'left' CHECK (menu_position IN ('left', 'right')),
    card_style TEXT DEFAULT 'modern' CHECK (card_style IN ('modern', 'classic')),
    language TEXT DEFAULT 'en-US',
    timezone TEXT DEFAULT 'UTC',
    department VARCHAR(255),
    location VARCHAR(255),
    phone VARCHAR(50),
    bio TEXT
);

-- Create departments table first
CREATE TABLE IF NOT EXISTS public.departments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create positions table second
CREATE TABLE IF NOT EXISTS public.positions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT,
    department_id BIGINT REFERENCES public.departments(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.partners (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT REFERENCES public.users(id) ON DELETE CASCADE,
    full_name TEXT NOT NULL,
    email TEXT NOT NULL,
    phone_number TEXT,
    profile_picture_url TEXT,
    specialization TEXT,
    company_name TEXT,
    business_type TEXT,
    tax_number TEXT,
    registration_number TEXT,
    address TEXT,
    city TEXT,
    country TEXT,
    postal_code TEXT,
    website TEXT,
    bio TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(user_id)
);

-- Create employees table after departments and positions
CREATE TABLE IF NOT EXISTS public.employees (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT REFERENCES public.users(id) ON DELETE CASCADE,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    email TEXT NOT NULL,
    phone_number TEXT,
    department_id BIGINT REFERENCES public.departments(id),
    position_id BIGINT REFERENCES public.positions(id),
    employee_code TEXT UNIQUE,
    hire_date DATE,
    reports_to BIGINT REFERENCES public.employees(id),
    office_location TEXT,
    work_schedule TEXT,
    employment_status TEXT CHECK (employment_status IN ('active', 'terminated', 'on_leave', 'suspended')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(user_id)
);

-- Create salaries table
CREATE TABLE IF NOT EXISTS public.salaries (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    employee_id BIGINT,
    base_salary NUMERIC(10,2) NOT NULL,
    effective_date DATE NOT NULL,
    end_date DATE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create salary_payments table
CREATE TABLE IF NOT EXISTS public.salary_payments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    employee_id BIGINT,
    amount NUMERIC(10,2) NOT NULL,
    payment_date DATE NOT NULL,
    payment_type TEXT NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.tasks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT,
    status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'in_progress', 'completed', 'cancelled')),
    priority TEXT NOT NULL DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high', 'urgent')),
    assigned_to BIGINT REFERENCES public.users(id),
    created_by BIGINT REFERENCES public.users(id) NOT NULL,
    due_date TIMESTAMP WITH TIME ZONE,
    start_date TIMESTAMP WITH TIME ZONE,
    completion_date TIMESTAMP WITH TIME ZONE,
    estimated_hours NUMERIC(5,2),
    actual_hours NUMERIC(5,2),
    tags TEXT[],
    category TEXT,
    project TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.task_comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task_id BIGINT REFERENCES public.tasks(id) ON DELETE CASCADE,
    user_id BIGINT REFERENCES public.users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.task_attachments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task_id BIGINT REFERENCES public.tasks(id) ON DELETE CASCADE,
    user_id BIGINT REFERENCES public.users(id) ON DELETE CASCADE,
    file_name TEXT NOT NULL,
    file_type TEXT NOT NULL,
    file_size BIGINT NOT NULL,
    file_url TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.user_stats (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT REFERENCES public.users(id) ON DELETE CASCADE,
    projects_count INTEGER DEFAULT 0,
    completion_rate NUMERIC(5,2) DEFAULT 0,
    team_members_count INTEGER DEFAULT 0,
    total_tasks INTEGER DEFAULT 0,
    completed_tasks INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(user_id)
);

-- Create indexes
CREATE INDEX idx_users_auth_id ON public.users(auth_id);
CREATE INDEX idx_users_email ON public.users(email);
CREATE INDEX idx_partners_user_id ON public.partners(user_id);
CREATE INDEX idx_employees_user_id ON public.employees(user_id);
CREATE INDEX idx_user_stats_user_id ON public.user_stats(user_id);
CREATE INDEX idx_tasks_assigned_to ON public.tasks(assigned_to);
CREATE INDEX idx_tasks_created_by ON public.tasks(created_by);
CREATE INDEX idx_tasks_status ON public.tasks(status);
CREATE INDEX idx_task_comments_task_id ON public.task_comments(task_id);
CREATE INDEX idx_task_attachments_task_id ON public.task_attachments(task_id);

-- Create triggers for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON public.users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_partners_updated_at
    BEFORE UPDATE ON public.partners
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_employees_updated_at
    BEFORE UPDATE ON public.employees
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_tasks_updated_at
    BEFORE UPDATE ON public.tasks
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_task_comments_updated_at
    BEFORE UPDATE ON public.task_comments
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_stats_updated_at
    BEFORE UPDATE ON public.user_stats
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Set up Row Level Security (RLS)
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.partners ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.employees ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.task_comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.task_attachments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_stats ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view their own data"
    ON public.users FOR SELECT
    USING (auth.uid() = auth_id);

CREATE POLICY "Users can update their own data"
    ON public.users FOR UPDATE
    USING (auth.uid() = auth_id);

CREATE POLICY "Partners can view their own data"
    ON public.partners FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM public.users
        WHERE users.id = partners.user_id
        AND users.auth_id = auth.uid()
    ));

CREATE POLICY "Partners can update their own data"
    ON public.partners FOR UPDATE
    USING (EXISTS (
        SELECT 1 FROM public.users
        WHERE users.id = partners.user_id
        AND users.auth_id = auth.uid()
    ));

CREATE POLICY "Employees can view their own data"
    ON public.employees FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM public.users
        WHERE users.id = employees.user_id
        AND users.auth_id = auth.uid()
    ));

CREATE POLICY "Employees can update their own data"
    ON public.employees FOR UPDATE
    USING (EXISTS (
        SELECT 1 FROM public.users
        WHERE users.id = employees.user_id
        AND users.auth_id = auth.uid()
    ));

CREATE POLICY "Users can view their assigned tasks"
    ON public.tasks FOR SELECT
    USING (
        auth.uid() IN (
            SELECT users.auth_id FROM public.users
            WHERE users.id = tasks.assigned_to
            OR users.id = tasks.created_by
            OR users.role IN ('admin', 'manager')
        )
    );

CREATE POLICY "Users can update their assigned tasks"
    ON public.tasks FOR UPDATE
    USING (
        auth.uid() IN (
            SELECT users.auth_id FROM public.users
            WHERE users.id = tasks.assigned_to
            OR users.id = tasks.created_by
            OR users.role IN ('admin', 'manager')
        )
    );

CREATE POLICY "Users can view task comments"
    ON public.task_comments FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM public.tasks
            WHERE tasks.id = task_comments.task_id
            AND (
                tasks.assigned_to IN (SELECT id FROM public.users WHERE auth_id = auth.uid())
                OR tasks.created_by IN (SELECT id FROM public.users WHERE auth_id = auth.uid())
            )
        )
    );

CREATE POLICY "Users can view task attachments"
    ON public.task_attachments FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM public.tasks
            WHERE tasks.id = task_attachments.task_id
            AND (
                tasks.assigned_to IN (SELECT id FROM public.users WHERE auth_id = auth.uid())
                OR tasks.created_by IN (SELECT id FROM public.users WHERE auth_id = auth.uid())
            )
        )
    );

CREATE POLICY "Users can view their own stats"
    ON public.user_stats FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM public.users
        WHERE users.id = user_stats.user_id
        AND users.auth_id = auth.uid()
    ));

-- Grant permissions
GRANT ALL ON public.users TO authenticated;
GRANT ALL ON public.partners TO authenticated;
GRANT ALL ON public.employees TO authenticated;
GRANT ALL ON public.tasks TO authenticated;
GRANT ALL ON public.task_comments TO authenticated;
GRANT ALL ON public.task_attachments TO authenticated;
GRANT ALL ON public.user_stats TO authenticated;

-- Add foreign key constraints to salaries and salary_payments
ALTER TABLE public.salaries
    ADD CONSTRAINT fk_salaries_employee
    FOREIGN KEY (employee_id)
    REFERENCES public.employees(id)
    ON DELETE CASCADE;

ALTER TABLE public.salary_payments
    ADD CONSTRAINT fk_salary_payments_employee
    FOREIGN KEY (employee_id)
    REFERENCES public.employees(id)
    ON DELETE CASCADE;

-- Insert initial departments
INSERT INTO public.departments (name, description) VALUES
    ('Engineering', 'Software development and technical operations'),
    ('Sales', 'Sales and business development'),
    ('Marketing', 'Marketing and brand management'),
    ('Finance', 'Financial operations and accounting'),
    ('HR', 'Human resources and recruitment'),
    ('Operations', 'Business operations and administration'),
    ('Media Production', 'Video, audio, and multimedia content creation'),
    ('Digital Marketing', 'Online marketing and digital campaigns'),
    ('Content Creation', 'Content strategy and development'),
    ('Advertising', 'Advertising campaigns and strategy'),
    ('Public Relations', 'Public relations and communications'),
    ('Social Media', 'Social media management and strategy'),
    ('Creative Design', 'Visual design and branding'),
    ('Video Production', 'Video content creation and editing'),
    ('Brand Management', 'Brand strategy and development');

-- Insert initial positions
INSERT INTO public.positions (title, description, department_id) 
SELECT 'Software Engineer', 'Develops and maintains software applications', id 
FROM public.departments WHERE name = 'Engineering';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Senior Software Engineer', 'Leads software development projects', id 
FROM public.departments WHERE name = 'Engineering';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Sales Representative', 'Manages client relationships and sales', id 
FROM public.departments WHERE name = 'Sales';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Marketing Manager', 'Oversees marketing campaigns', id 
FROM public.departments WHERE name = 'Marketing';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Financial Analyst', 'Analyzes financial data and reports', id 
FROM public.departments WHERE name = 'Finance';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'HR Manager', 'Manages HR operations and policies', id 
FROM public.departments WHERE name = 'HR';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Operations Manager', 'Oversees business operations', id 
FROM public.departments WHERE name = 'Operations';

-- Media & Advertising positions
INSERT INTO public.positions (title, description, department_id) 
SELECT 'Creative Director', 'Leads creative vision and strategy', id 
FROM public.departments WHERE name = 'Creative Design';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Art Director', 'Directs visual design and branding', id 
FROM public.departments WHERE name = 'Creative Design';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Content Strategist', 'Develops content strategy and planning', id 
FROM public.departments WHERE name = 'Content Creation';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Social Media Manager', 'Manages social media presence', id 
FROM public.departments WHERE name = 'Social Media';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Digital Marketing Specialist', 'Executes digital marketing campaigns', id 
FROM public.departments WHERE name = 'Digital Marketing';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Media Planner', 'Plans and coordinates media campaigns', id 
FROM public.departments WHERE name = 'Advertising';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Copywriter', 'Creates compelling written content', id 
FROM public.departments WHERE name = 'Content Creation';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Video Editor', 'Edits and produces video content', id 
FROM public.departments WHERE name = 'Video Production';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Motion Graphics Designer', 'Creates animated visual content', id 
FROM public.departments WHERE name = 'Media Production';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Brand Strategist', 'Develops brand strategy', id 
FROM public.departments WHERE name = 'Brand Management';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Marketing Coordinator', 'Coordinates marketing activities', id 
FROM public.departments WHERE name = 'Marketing';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'PR Specialist', 'Manages public relations', id 
FROM public.departments WHERE name = 'Public Relations';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Account Manager', 'Manages client accounts', id 
FROM public.departments WHERE name = 'Advertising';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Media Buyer', 'Purchases advertising space', id 
FROM public.departments WHERE name = 'Advertising';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'SEO Specialist', 'Optimizes digital content', id 
FROM public.departments WHERE name = 'Digital Marketing';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'Content Producer', 'Produces multimedia content', id 
FROM public.departments WHERE name = 'Media Production';

INSERT INTO public.positions (title, description, department_id) 
SELECT 'UX/UI Designer', 'Designs user interfaces', id 
FROM public.departments WHERE name = 'Creative Design';

-- Insert initial employees
INSERT INTO public.employees (user_id, first_name, last_name, email, phone_number, department_id, position_id, employee_code, hire_date, reports_to, office_location, work_schedule, employment_status)
VALUES
    (1, 'John', 'Doe', 'john.doe@example.com', '555-1234', 1, 1, 'EMP001', '2024-03-01', NULL, 'Office 1', 'Full-time', 'active'),
    (2, 'Jane', 'Smith', 'jane.smith@example.com', '555-5678', 2, 2, 'EMP002', '2024-03-02', 1, 'Office 2', 'Part-time', 'active'),
    (3, 'Bob', 'Johnson', 'bob.johnson@example.com', '555-9012', 3, 3, 'EMP003', '2024-03-03', 2, 'Office 3', 'Full-time', 'active'),
    (4, 'Alice', 'Brown', 'alice.brown@example.com', '555-3456', 4, 4, 'EMP004', '2024-03-04', 3, 'Office 4', 'Part-time', 'active'),
    (5, 'Charlie', 'Davis', 'charlie.davis@example.com', '555-7890', 5, 5, 'EMP005', '2024-03-05', 4, 'Office 5', 'Full-time', 'active'),
    (6, 'Eve', 'Wilson', 'eve.wilson@example.com', '555-2345', 6, 6, 'EMP006', '2024-03-06', 5, 'Office 6', 'Part-time', 'active'),
    (7, 'Frank', 'Miller', 'frank.miller@example.com', '555-6789', 7, 7, 'EMP007', '2024-03-07', 6, 'Office 7', 'Full-time', 'active'),
    (8, 'Grace', 'Davis', 'grace.davis@example.com', '555-0123', 8, 8, 'EMP008', '2024-03-08', 7, 'Office 8', 'Part-time', 'active'),
    (9, 'Hank', 'Wilson', 'hank.wilson@example.com', '555-4567', 9, 9, 'EMP009', '2024-03-09', 8, 'Office 9', 'Full-time', 'active'),
    (10, 'Ivy', 'Miller', 'ivy.miller@example.com', '555-8901', 10, 10, 'EMP010', '2024-03-10', 9, 'Office 10', 'Part-time', 'active');

-- Insert initial salaries
INSERT INTO public.salaries (employee_id, base_salary, effective_date, end_date)
VALUES
    (1, 50000.00, '2024-03-01', NULL),
    (2, 45000.00, '2024-03-02', NULL),
    (3, 55000.00, '2024-03-03', NULL),
    (4, 40000.00, '2024-03-04', NULL),
    (5, 60000.00, '2024-03-05', NULL),
    (6, 48000.00, '2024-03-06', NULL),
    (7, 52000.00, '2024-03-07', NULL),
    (8, 42000.00, '2024-03-08', NULL),
    (9, 65000.00, '2024-03-09', NULL),
    (10, 50000.00, '2024-03-10', NULL);

-- Insert initial salary payments
INSERT INTO public.salary_payments (employee_id, amount, payment_date, payment_type, description)
VALUES
    (1, 50000.00, '2024-03-15', 'Direct Deposit', 'Monthly salary'),
    (2, 45000.00, '2024-03-15', 'Direct Deposit', 'Monthly salary'),
    (3, 55000.00, '2024-03-15', 'Direct Deposit', 'Monthly salary'),
    (4, 40000.00, '2024-03-15', 'Direct Deposit', 'Monthly salary'),
    (5, 60000.00, '2024-03-15', 'Direct Deposit', 'Monthly salary'),
    (6, 48000.00, '2024-03-15', 'Direct Deposit', 'Monthly salary'),
    (7, 52000.00, '2024-03-15', 'Direct Deposit', 'Monthly salary'),
    (8, 42000.00, '2024-03-15', 'Direct Deposit', 'Monthly salary'),
    (9, 65000.00, '2024-03-15', 'Direct Deposit', 'Monthly salary'),
    (10, 50000.00, '2024-03-15', 'Direct Deposit', 'Monthly salary');

-- Insert initial tasks
INSERT INTO public.tasks (title, description, status, priority, assigned_to, created_by, due_date, start_date, completion_date, estimated_hours, actual_hours, tags, category, project)
VALUES
    ('Task 1', 'Description of Task 1', 'pending', 'medium', 1, 1, NULL, NULL, NULL, 4.0, NULL, ARRAY['tag1', 'tag2'], 'category1', 'project1'),
    ('Task 2', 'Description of Task 2', 'in_progress', 'high', 2, 2, NULL, NULL, NULL, 8.0, NULL, ARRAY['tag3'], 'category2', 'project2'),
    ('Task 3', 'Description of Task 3', 'completed', 'low', 3, 3, '2024-03-15', '2024-03-01', '2024-03-15', 2.0, 2.0, ARRAY['tag4'], 'category3', 'project3'),
    ('Task 4', 'Description of Task 4', 'cancelled', 'urgent', 4, 4, NULL, NULL, NULL, 6.0, NULL, ARRAY['tag5'], 'category4', 'project4'),
    ('Task 5', 'Description of Task 5', 'pending', 'medium', 5, 5, NULL, NULL, NULL, 4.0, NULL, ARRAY['tag6'], 'category5', 'project5'),
    ('Task 6', 'Description of Task 6', 'in_progress', 'high', 6, 6, NULL, NULL, NULL, 8.0, NULL, ARRAY['tag7'], 'category6', 'project6'),
    ('Task 7', 'Description of Task 7', 'completed', 'low', 7, 7, '2024-03-15', '2024-03-01', '2024-03-15', 2.0, 2.0, ARRAY['tag8'], 'category7', 'project7'),
    ('Task 8', 'Description of Task 8', 'cancelled', 'urgent', 8, 8, NULL, NULL, NULL, 6.0, NULL, ARRAY['tag9'], 'category8', 'project8'),
    ('Task 9', 'Description of Task 9', 'pending', 'medium', 9, 9, NULL, NULL, NULL, 4.0, NULL, ARRAY['tag10'], 'category9', 'project9'),
    ('Task 10', 'Description of Task 10', 'in_progress', 'high', 10, 10, NULL, NULL, NULL, 8.0, NULL, ARRAY['tag11'], 'category10', 'project10');

-- Insert initial task comments
INSERT INTO public.task_comments (task_id, user_id, content)
VALUES
    (1, 1, 'This is a comment on Task 1'),
    (2, 2, 'This is a comment on Task 2'),
    (3, 3, 'This is a comment on Task 3'),
    (4, 4, 'This is a comment on Task 4'),
    (5, 5, 'This is a comment on Task 5'),
    (6, 6, 'This is a comment on Task 6'),
    (7, 7, 'This is a comment on Task 7'),
    (8, 8, 'This is a comment on Task 8'),
    (9, 9, 'This is a comment on Task 9'),
    (10, 10, 'This is a comment on Task 10');

-- Insert initial task attachments
INSERT INTO public.task_attachments (task_id, user_id, file_name, file_type, file_size, file_url)
VALUES
    (1, 1, 'Attachment1.pdf', 'application/pdf', 1048576, 'https://example.com/attachment1.pdf'),
    (2, 2, 'Attachment2.docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 204800, 'https://example.com/attachment2.docx'),
    (3, 3, 'Attachment3.jpg', 'image/jpeg', 5242880, 'https://example.com/attachment3.jpg'),
    (4, 4, 'Attachment4.png', 'image/png', 1048576, 'https://example.com/attachment4.png'),
    (5, 5, 'Attachment5.txt', 'text/plain', 102400, 'https://example.com/attachment5.txt'),
    (6, 6, 'Attachment6.doc', 'application/msword', 204800, 'https://example.com/attachment6.doc'),
    (7, 7, 'Attachment7.jpg', 'image/jpeg', 5242880, 'https://example.com/attachment7.jpg'),
    (8, 8, 'Attachment8.png', 'image/png', 1048576, 'https://example.com/attachment8.png'),
    (9, 9, 'Attachment9.txt', 'text/plain', 102400, 'https://example.com/attachment9.txt'),
    (10, 10, 'Attachment10.doc', 'application/msword', 204800, 'https://example.com/attachment10.doc');

-- Insert initial user stats
INSERT INTO public.user_stats (user_id, projects_count, completion_rate, team_members_count, total_tasks, completed_tasks)
VALUES
    (1, 5, 0.8, 3, 10, 8),
    (2, 4, 0.7, 2, 8, 6),
    (3, 3, 0.6, 1, 6, 4),
    (4, 2, 0.5, 1, 4, 2),
    (5, 1, 0.4, 0, 2, 1),
    (6, 3, 0.7, 2, 6, 4),
    (7, 2, 0.6, 1, 4, 3),
    (8, 1, 0.5, 0, 2, 1),
    (9, 4, 0.8, 3, 8, 6),
    (10, 2, 0.6, 1, 4, 2); 